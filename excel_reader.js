/**
 * –í–µ–±-–≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ Excel —Ñ–∞–π–ª–æ–≤ –¥–ª—è —à–∫–æ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É SheetJS –¥–ª—è —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 */

class ExcelMenuParser {
    constructor() {
        this.menuData = {};
        this.isLoading = false;
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç Excel —Ñ–∞–π–ª—ã
     */
    async loadExcelFiles() {
        if (this.isLoading) return;
        
        this.isLoading = true;
        this.showLoadingMessage();

        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞
            const files = [
                'School Menu/–ú–µ–Ω—é_–Ω–∞_1_4_–∫–ª–∞—Å—Å—ã_–ö–∞—Å–ø–∏–π—Å–∫_—Å–µ–Ω—Ç—è–±—Ä—å_–ø–µ—Ä–≤–∞—è_—Å–º–µ–Ω–∞.xls',
                'School Menu/–ú–µ–Ω—é_–Ω–∞_1_4_–∫–ª–∞—Å—Å—ã_–ö–∞—Å–ø–∏–π—Å–∫_—Å–µ–Ω—Ç—è–±—Ä—å_–≤—Ç–æ—Ä–∞—è_—Å–º–µ–Ω–∞_.xls'
            ];

            for (const filePath of files) {
                try {
                    const response = await fetch(filePath);
                    if (response.ok) {
                        const arrayBuffer = await response.arrayBuffer();
                        const workbook = XLSX.read(arrayBuffer, { type: 'array' });
                        
                        const shiftType = filePath.includes('–ø–µ—Ä–≤–∞—è') ? 'first' : 'second';
                        this.menuData[shiftType] = this.parseWorkbook(workbook, shiftType);
                        
                        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
                    } else {
                        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: ${filePath}`);
                    }
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${filePath}:`, error);
                }
            }

            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (Object.keys(this.menuData).length === 0) {
                console.log('üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                this.menuData = this.createSampleData();
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateMenuDisplay();
            
        } catch (error) {
            console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
            this.menuData = this.createSampleData();
            this.updateMenuDisplay();
        } finally {
            this.isLoading = false;
            this.hideLoadingMessage();
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç Excel workbook
     */
    parseWorkbook(workbook, shiftType) {
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

        const menuData = {
            shift_type: shiftType,
            shift_name: shiftType === 'first' ? '–ü–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞' : '–í—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞',
            days: []
        };

        const daysOfWeek = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞'];
        const mealTypes = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥', '–ø–æ–ª–¥–Ω–∏–∫', '—É–∂–∏–Ω'];
        
        let currentDay = null;
        let currentDate = null;
        let currentMeals = {};
        let currentMealType = null;

        for (let i = 0; i < jsonData.length; i++) {
            const row = jsonData[i];
            if (!row || row.length === 0) continue;

            const cellText = String(row[0] || '').toLowerCase().trim();
            if (!cellText || cellText === 'undefined') continue;

            // –ò—â–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            const foundDay = daysOfWeek.find(day => cellText.includes(day));
            if (foundDay) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
                if (currentDay && Object.keys(currentMeals).length > 0) {
                    menuData.days.push({
                        day: this.capitalize(currentDay),
                        date: currentDate || '',
                        meals: { ...currentMeals }
                    });
                }

                currentDay = foundDay;
                currentMeals = {};
                currentMealType = null;

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
                const dateMatch = String(row[0]).match(/\d{1,2}[.\-/]\d{1,2}/);
                currentDate = dateMatch ? dateMatch[0] : '';
                continue;
            }

            // –ò—â–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
            const foundMealType = mealTypes.find(meal => cellText.includes(meal));
            if (foundMealType) {
                currentMealType = foundMealType;
                if (!currentMeals[currentMealType]) {
                    currentMeals[currentMealType] = [];
                }
                continue;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–æ
            if (currentMealType && cellText.length > 2) {
                // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –±–ª—é–¥–∞
                const dish = String(row[0]).trim()
                    .replace(/^\d+\.?\s*/, '') // –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞
                    .replace(/\s+/g, ' '); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
                
                if (dish && dish !== 'undefined' && !dish.match(/^[.\-\s]*$/)) {
                    currentMeals[currentMealType].push(dish);
                }
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
        if (currentDay && Object.keys(currentMeals).length > 0) {
            menuData.days.push({
                day: this.capitalize(currentDay),
                date: currentDate || '',
                meals: { ...currentMeals }
            });
        }

        return menuData;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    updateMenuDisplay() {
        Object.keys(this.menuData).forEach(shiftType => {
            const container = document.getElementById(`${shiftType}-shift`);
            if (!container) return;

            const weekGrid = container.querySelector('.week-grid');
            if (!weekGrid) return;

            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            weekGrid.innerHTML = '';

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            this.menuData[shiftType].days.forEach(dayData => {
                const dayCard = this.createDayCard(dayData);
                weekGrid.appendChild(dayCard);
            });
        });

        console.log('‚úÖ –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç HTML –∫–∞—Ä—Ç–æ—á–∫—É –¥–Ω—è
     */
    createDayCard(dayData) {
        const dayCard = document.createElement('div');
        dayCard.className = 'day-card';

        const mealsHTML = Object.entries(dayData.meals).map(([mealType, dishes]) => {
            const dishesHTML = dishes.map(dish => `<li>${dish}</li>`).join('');
            return `
                <div class="meal">
                    <h4 class="meal-type">${this.capitalize(mealType)}</h4>
                    <ul class="meal-items">
                        ${dishesHTML}
                    </ul>
                </div>
            `;
        }).join('');

        dayCard.innerHTML = `
            <div class="day-header">
                <h3>${dayData.day}</h3>
                <span class="date">${dayData.date}</span>
            </div>
            <div class="meals">
                ${mealsHTML}
            </div>
        `;

        return dayCard;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    createSampleData() {
        return {
            first: {
                shift_type: 'first',
                shift_name: '–ü–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞',
                days: [
                    {
                        day: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                        date: '2.09',
                        meals: {
                            –∑–∞–≤—Ç—Ä–∞–∫: ['–ö–∞—à–∞ –æ–≤—Å—è–Ω–∞—è –º–æ–ª–æ—á–Ω–∞—è', '–ë—É—Ç–µ—Ä–±—Ä–æ–¥ —Å –º–∞—Å–ª–æ–º', '–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º'],
                            –æ–±–µ–¥: ['–ë–æ—Ä—â —Å–æ —Å–º–µ—Ç–∞–Ω–æ–π', '–ö–æ—Ç–ª–µ—Ç–∞ –∫—É—Ä–∏–Ω–∞—è', '–ü—é—Ä–µ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ', '–°–∞–ª–∞—Ç –∏–∑ –∫–∞–ø—É—Å—Ç—ã', '–ö–æ–º–ø–æ—Ç –∏–∑ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç–æ–≤']
                        }
                    },
                    {
                        day: '–í—Ç–æ—Ä–Ω–∏–∫',
                        date: '3.09',
                        meals: {
                            –∑–∞–≤—Ç—Ä–∞–∫: ['–ö–∞—à–∞ —Ä–∏—Å–æ–≤–∞—è –º–æ–ª–æ—á–Ω–∞—è', '–Ø–π—Ü–æ –≤–∞—Ä–µ–Ω–æ–µ', '–ö–∞–∫–∞–æ'],
                            –æ–±–µ–¥: ['–°—É–ø –≥–æ—Ä–æ—Ö–æ–≤—ã–π', '–†—ã–±–∞ –∑–∞–ø–µ—á–µ–Ω–Ω–∞—è', '–†–∏—Å –æ—Ç–≤–∞—Ä–Ω–æ–π', '–°–∞–ª–∞—Ç –æ–≤–æ—â–Ω–æ–π', '–°–æ–∫ —è–±–ª–æ—á–Ω—ã–π']
                        }
                    },
                    {
                        day: '–°—Ä–µ–¥–∞',
                        date: '4.09',
                        meals: {
                            –∑–∞–≤—Ç—Ä–∞–∫: ['–ö–∞—à–∞ –≥—Ä–µ—á–Ω–µ–≤–∞—è', '–°–æ—Å–∏—Å–∫–∞', '–ß–∞–π —Å –ª–∏–º–æ–Ω–æ–º'],
                            –æ–±–µ–¥: ['–©–∏ –∏–∑ —Å–≤–µ–∂–µ–π –∫–∞–ø—É—Å—Ç—ã', '–ì—É–ª—è—à –≥–æ–≤—è–∂–∏–π', '–ú–∞–∫–∞—Ä–æ–Ω—ã –æ—Ç–≤–∞—Ä–Ω—ã–µ', '–°–∞–ª–∞—Ç –º–æ—Ä–∫–æ–≤–Ω—ã–π', '–ö–∏—Å–µ–ª—å —è–≥–æ–¥–Ω—ã–π']
                        }
                    },
                    {
                        day: '–ß–µ—Ç–≤–µ—Ä–≥',
                        date: '5.09',
                        meals: {
                            –∑–∞–≤—Ç—Ä–∞–∫: ['–û–º–ª–µ—Ç', '–•–ª–µ–± —Å –¥–∂–µ–º–æ–º', '–ú–æ–ª–æ–∫–æ'],
                            –æ–±–µ–¥: ['–°—É–ø –∫—É—Ä–∏–Ω—ã–π —Å –ª–∞–ø—à–æ–π', '–¢–µ—Ñ—Ç–µ–ª–∏ –º—è—Å–Ω—ã–µ', '–ì—Ä–µ—á–∫–∞ –æ—Ç–≤–∞—Ä–Ω–∞—è', '–°–∞–ª–∞—Ç –∏–∑ –æ–≥—É—Ä—Ü–æ–≤', '–ö–æ–º–ø–æ—Ç –∏–∑ —è–±–ª–æ–∫']
                        }
                    },
                    {
                        day: '–ü—è—Ç–Ω–∏—Ü–∞',
                        date: '6.09',
                        meals: {
                            –∑–∞–≤—Ç—Ä–∞–∫: ['–ö–∞—à–∞ –ø—à–µ–Ω–Ω–∞—è', '–¢–≤–æ—Ä–æ–∂–æ–∫', '–ß–∞–π —Å –º–µ–¥–æ–º'],
                            –æ–±–µ–¥: ['–°–æ–ª—è–Ω–∫–∞ –º—è—Å–Ω–∞—è', '–ö—É—Ä–∏—Ü–∞ –æ—Ç–≤–∞—Ä–Ω–∞—è', '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å –æ—Ç–≤–∞—Ä–Ω–æ–π', '–°–∞–ª–∞—Ç —Å–≤–µ–∫–æ–ª—å–Ω—ã–π', '–ú–æ—Ä—Å –∫–ª—é–∫–≤–µ–Ω–Ω—ã–π']
                        }
                    }
                ]
            },
            second: {
                shift_type: 'second',
                shift_name: '–í—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞',
                days: [
                    {
                        day: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                        date: '2.09',
                        meals: {
                            –æ–±–µ–¥: ['–°—É–ø –æ–≤–æ—â–Ω–æ–π', '–†—ã–±–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã', '–†–∏—Å —Å –æ–≤–æ—â–∞–º–∏', '–°–∞–ª–∞—Ç –≤–∏—Ç–∞–º–∏–Ω–Ω—ã–π', '–ö–æ–º–ø–æ—Ç –∏–∑ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç–æ–≤'],
                            –ø–æ–ª–¥–Ω–∏–∫: ['–ë—É–ª–æ—á–∫–∞ —Å –ø–æ–≤–∏–¥–ª–æ–º', '–ú–æ–ª–æ–∫–æ', '–§—Ä—É–∫—Ç—ã']
                        }
                    },
                    {
                        day: '–í—Ç–æ—Ä–Ω–∏–∫',
                        date: '3.09',
                        meals: {
                            –æ–±–µ–¥: ['–ë–æ—Ä—â —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π', '–ö–æ—Ç–ª–µ—Ç–∞ —Å–≤–∏–Ω–∞—è', '–ü—é—Ä–µ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ', '–°–∞–ª–∞—Ç –∏–∑ –ø–æ–º–∏–¥–æ—Ä–æ–≤', '–°–æ–∫ –∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π'],
                            –ø–æ–ª–¥–Ω–∏–∫: ['–ü–µ—á–µ–Ω—å–µ –æ–≤—Å—è–Ω–æ–µ', '–ô–æ–≥—É—Ä—Ç', '–ë–∞–Ω–∞–Ω']
                        }
                    },
                    {
                        day: '–°—Ä–µ–¥–∞',
                        date: '4.09',
                        meals: {
                            –æ–±–µ–¥: ['–°—É–ø —Ä–∞—Å—Å–æ–ª—å–Ω–∏–∫', '–ö—É—Ä–∏—Ü–∞ –∑–∞–ø–µ—á–µ–Ω–Ω–∞—è', '–ì—Ä–µ—á–∫–∞ —Å –º–∞—Å–ª–æ–º', '–°–∞–ª–∞—Ç –∫–∞–ø—É—Å—Ç–Ω—ã–π', '–ö–∏—Å–µ–ª—å –≤–∏—à–Ω–µ–≤—ã–π'],
                            –ø–æ–ª–¥–Ω–∏–∫: ['–°—ã—Ä–Ω–∏–∫–∏', '–°–º–µ—Ç–∞–Ω–∞', '–ß–∞–π']
                        }
                    },
                    {
                        day: '–ß–µ—Ç–≤–µ—Ä–≥',
                        date: '5.09',
                        meals: {
                            –æ–±–µ–¥: ['–°—É–ø –º–æ–ª–æ—á–Ω—ã–π', '–ë–∏—Ç–æ—á–∫–∏ —Ä—ã–±–Ω—ã–µ', '–ú–∞–∫–∞—Ä–æ–Ω—ã –æ—Ç–≤–∞—Ä–Ω—ã–µ', '–°–∞–ª–∞—Ç –æ–≥—É—Ä–µ—á–Ω—ã–π', '–ö–æ–º–ø–æ—Ç —è–±–ª–æ—á–Ω—ã–π'],
                            –ø–æ–ª–¥–Ω–∏–∫: ['–ö–µ–∫—Å –¥–æ–º–∞—à–Ω–∏–π', '–ö–∞–∫–∞–æ', '–Ø–±–ª–æ–∫–æ']
                        }
                    },
                    {
                        day: '–ü—è—Ç–Ω–∏—Ü–∞',
                        date: '6.09',
                        meals: {
                            –æ–±–µ–¥: ['–©–∏ –∫–∏—Å–ª—ã–µ', '–¢–µ—Ñ—Ç–µ–ª–∏ –≤ —Å–æ—É—Å–µ', '–†–∏—Å –æ—Ç–≤–∞—Ä–Ω–æ–π', '–°–∞–ª–∞—Ç –º–æ—Ä–∫–æ–≤–Ω—ã–π', '–ú–æ—Ä—Å –±—Ä—É—Å–Ω–∏—á–Ω—ã–π'],
                            –ø–æ–ª–¥–Ω–∏–∫: ['–ó–∞–ø–µ–∫–∞–Ω–∫–∞ —Ç–≤–æ—Ä–æ–∂–Ω–∞—è', '–ú–æ–ª–æ–∫–æ', '–ì—Ä—É—à–∞']
                        }
                    }
                ]
            }
        };
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoadingMessage() {
        const existing = document.querySelector('.excel-loading');
        if (existing) existing.remove();

        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'excel-loading';
        loadingDiv.innerHTML = `
            <div class="loading-content">
                <div class="loading-spinner"></div>
                <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–æ–≤...</p>
            </div>
        `;

        const styles = `
            .excel-loading {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(255, 248, 243, 0.95);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 2000;
            }
            
            .excel-loading .loading-content {
                text-align: center;
                color: var(--primary-brown);
            }
            
            .excel-loading .loading-spinner {
                width: 50px;
                height: 50px;
                border: 4px solid var(--light-orange);
                border-top: 4px solid var(--primary-orange);
                border-radius: 50%;
                animation: spin 1s linear infinite;
                margin: 0 auto 20px;
            }
        `;

        if (!document.querySelector('#excel-loading-styles')) {
            const style = document.createElement('style');
            style.id = 'excel-loading-styles';
            style.textContent = styles;
            document.head.appendChild(style);
        }

        document.body.appendChild(loadingDiv);
    }

    /**
     * –°–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hideLoadingMessage() {
        const loadingDiv = document.querySelector('.excel-loading');
        if (loadingDiv) {
            loadingDiv.style.opacity = '0';
            setTimeout(() => loadingDiv.remove(), 300);
        }
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏
     */
    capitalize(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
     */
    downloadAsJSON() {
        const dataStr = JSON.stringify(this.menuData, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = 'menu_data.json';
        link.click();
        
        URL.revokeObjectURL(url);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
window.excelParser = new ExcelMenuParser();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ SheetJS
    if (typeof XLSX !== 'undefined') {
        window.excelParser.loadExcelFiles();
    } else {
        // –ï—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('üìö SheetJS –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        window.excelParser.menuData = window.excelParser.createSampleData();
        window.excelParser.updateMenuDisplay();
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤
    setupFileUpload();
});

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
 */
function setupFileUpload() {
    const fileInput = document.getElementById('excel-upload');
    
    if (fileInput) {
        fileInput.addEventListener('change', function(e) {
            const files = Array.from(e.target.files);
            if (files.length > 0) {
                processUploadedFiles(files);
            }
        });
    }

    // Drag and drop –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('dragover', function(e) {
        e.preventDefault();
        document.body.style.background = 'linear-gradient(135deg, #FFDBCC 0%, #FFB366 100%)';
    });

    document.addEventListener('dragleave', function(e) {
        if (e.clientX === 0 && e.clientY === 0) {
            document.body.style.background = '';
        }
    });

    document.addEventListener('drop', function(e) {
        e.preventDefault();
        document.body.style.background = '';
        
        const files = Array.from(e.dataTransfer.files).filter(file => 
            file.name.endsWith('.xls') || file.name.endsWith('.xlsx')
        );
        
        if (files.length > 0) {
            processUploadedFiles(files);
        } else {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª—ã (.xls –∏–ª–∏ .xlsx)');
        }
    });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */
async function processUploadedFiles(files) {
    window.excelParser.showLoadingMessage();
    
    try {
        for (const file of files) {
            const arrayBuffer = await file.arrayBuffer();
            const workbook = XLSX.read(arrayBuffer, { type: 'array' });
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–º–µ–Ω—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            const fileName = file.name.toLowerCase();
            const shiftType = fileName.includes('–ø–µ—Ä–≤–∞—è') ? 'first' : 'second';
            
            window.excelParser.menuData[shiftType] = window.excelParser.parseWorkbook(workbook, shiftType);
            
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª: ${file.name}`);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        window.excelParser.updateMenuDisplay();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        showNotification('‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!', 'success');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤', 'error');
    } finally {
        window.excelParser.hideLoadingMessage();
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    const styles = `
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 10px;
            color: white;
            font-weight: 500;
            z-index: 3000;
            animation: slideInRight 0.3s ease, fadeOut 0.3s ease 2.7s;
            max-width: 300px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }
        
        .notification-success {
            background: linear-gradient(135deg, #28a745, #20c997);
        }
        
        .notification-error {
            background: linear-gradient(135deg, #dc3545, #fd7e14);
        }
        
        .notification-info {
            background: linear-gradient(135deg, var(--primary-orange), var(--secondary-orange));
        }
        
        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        @keyframes fadeOut {
            to {
                opacity: 0;
                transform: translateX(100%);
            }
        }
    `;
    
    if (!document.querySelector('#notification-styles')) {
        const style = document.createElement('style');
        style.id = 'notification-styles';
        style.textContent = styles;
        document.head.appendChild(style);
    }
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 3000);
}
